document.addEventListener('DOMContentLoaded', () => {
    // ... (DOM –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    const dashboardPanel = document.getElementById('dashboard-panel');
    const addInstrumentBtn = document.getElementById('addInstrumentBtn');
    const instrumentModal = document.getElementById('instrumentModal');
    const closeModalBtn = instrumentModal.querySelector('.close-button');
    const instrumentForm = document.getElementById('instrumentForm');
    const instrumentTypeSelect = document.getElementById('instrumentType');

    const gaugeFields = document.getElementById('gaugeFields');
    const digitalDisplayFields = document.getElementById('digitalDisplayFields');
    const warningPanelFields = document.getElementById('warningPanelFields');
    const warningRangesContainer = document.getElementById('warningRangesContainer');
    const addWarningRangeBtn = document.getElementById('addWarningRangeBtn');

    let instrumentsMap = new Map();
    let ws;

    function connectWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        ws = new WebSocket(`${protocol}//${window.location.host}/ws/dashboard`);

        ws.onopen = () => console.log('WebSocket connected');

        // main.js -> ws.onmessage
        ws.onmessage = (event) => {
            try {
                console.log("WebSocket message received (raw):", event.data); // –õ–æ–≥ —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
                const message = JSON.parse(event.data);
                console.log("WebSocket message parsed:", message); // –õ–æ–≥ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

                if (message.instrumentClass === 'VALUE_UPDATE') {
                    const { id, value } = message.update;
                    console.log(`VALUE_UPDATE received for id: ${id}, new value: ${value}`);

                    const instrumentDiv = document.getElementById(`instrument-${id}`);
                    if (instrumentDiv) {
                        console.log(`Found instrumentDiv for id: ${id}`);
                        const instrumentData = instrumentsMap.get(id); // ID —Ç—É—Ç –º–∞—î –±—É—Ç–∏ —Ç–∏–º, —â–æ –ø—Ä–∏–π—à–ª–æ –∑ WS (_id)
                        if (instrumentData) {
                            console.log(`Found instrumentData in map for id: ${id}. Old value: ${instrumentData.currentValue}`);
                            instrumentData.currentValue = value;
                            console.log(`Updated instrumentData.currentValue to: ${instrumentData.currentValue}`);

                            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ instrumentData.instrumentClass —î
                            if (!instrumentData.instrumentClass) {
                                console.error("instrumentClass is missing in instrumentData from map for ID:", id, instrumentData);
                                return;
                            }

                            switch (instrumentData.instrumentClass) {
                                case 'GAUGE':
                                    console.log(`Calling updateGaugeDisplay for id: ${id}`);
                                    updateGaugeDisplay(instrumentDiv, value);
                                    break;
                                case 'DIGITAL_DISPLAY':
                                    console.log(`Calling updateDigitalDisplay for id: ${id}`);
                                    updateDigitalDisplay(instrumentDiv, value);
                                    break;
                                case 'WARNING_PANEL':
                                    console.log(`Calling updateWarningPanel for id: ${id}`);
                                    updateWarningPanel(instrumentDiv, value);
                                    break;
                                default:
                                    console.error("Unknown instrumentClass in ws.onmessage switch:", instrumentData.instrumentClass);
                            }
                        } else {
                            console.warn(`No instrumentData found in instrumentsMap for id: ${id}`);
                        }
                    } else {
                        console.warn(`No instrumentDiv found on page for id: ${id}`);
                    }
                } else if (message.instrumentClass === 'FULL_STATE') {
                    // ...
                } else {
                    console.warn("Received unknown WebSocket message type:", message);
                }
            } catch (error) {
                console.error('Error processing WebSocket message:', error);
            }
        };
        ws.onerror = (error) => console.error('WebSocket error:', error);
        ws.onclose = () => {
            console.log('WebSocket disconnected. Attempting to reconnect...');
            setTimeout(connectWebSocket, 3000);
        };
    }

    function addCommonInstrumentControls(instrumentDiv, name, instrumentData) {
        // instrumentData —Ç—É—Ç –≤–∂–µ –º–∞—î –ø–æ–ª–µ 'id', —è–∫–µ —î –∑–Ω–∞—á–µ–Ω–Ω—è–º _id –∑ —Å–µ—Ä–≤–µ—Ä–∞
        const header = document.createElement('div');
        header.className = 'instrument-header';
        header.textContent = name;
        instrumentDiv.prepend(header);

        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'instrument-controls';

        const editBtn = document.createElement('button');
        editBtn.textContent = '‚öôÔ∏è';
        editBtn.title = 'Edit Instrument';
        editBtn.onclick = (e) => {
            e.stopPropagation();
            openModalForEdit(instrumentData.id); // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π 'id' (—è–∫–∏–π —î _id)
        };
        controlsDiv.appendChild(editBtn);

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'üóëÔ∏è';
        deleteBtn.title = 'Delete Instrument';
        deleteBtn.onclick = async (e) => {
            e.stopPropagation();
            if (confirm(`Are you sure you want to delete "${name}"?`)) {
                try {
                    await deleteInstrument(instrumentData.id); // –í–∏–∫–ª–∏–∫–∞—î–º–æ API –∑ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–º 'id'
                    instrumentDiv.remove();
                    instrumentsMap.delete(instrumentData.id);
                } catch (error) {
                    console.error('Failed to delete instrument:', error);
                    alert(`Error: ${error.message}`);
                }
            }
        };
        controlsDiv.appendChild(deleteBtn);
        instrumentDiv.appendChild(controlsDiv);
    }

    function renderInstrument(instrumentData) { // instrumentData —Ç—É—Ç –≤–∂–µ –º–∞—î –ø–æ–ª–µ 'id'
        let instrumentDiv;
        // console.log("Rendering instrument:", instrumentData); // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ, –±–æ –≤–∂–µ —î –≤ loadInstruments
        if (!instrumentData || typeof instrumentData.instrumentClass === 'undefined') {
            console.error('Unknown or invalid instrument data (renderInstrument):', instrumentData);
            return null;
        }
        switch (instrumentData.instrumentClass) {
            case 'GAUGE':
                instrumentDiv = renderGauge(instrumentData, addCommonInstrumentControls);
                break;
            case 'DIGITAL_DISPLAY':
                instrumentDiv = renderDigitalDisplay(instrumentData, addCommonInstrumentControls);
                break;
            case 'WARNING_PANEL':
                instrumentDiv = renderWarningPanel(instrumentData, addCommonInstrumentControls);
                break;
            default:
                console.error('Unknown instrument class in renderInstrument:', instrumentData.instrumentClass);
                return null;
        }
        if (instrumentDiv) {
            makeDraggable(instrumentDiv);
        }
        return instrumentDiv;
    }

    async function loadInstruments() {
        try {
            const instrumentsFromServer = await fetchInstruments();
            console.log("Data received by loadInstruments (from fetchInstruments):", JSON.parse(JSON.stringify(instrumentsFromServer)));

            dashboardPanel.innerHTML = '';
            instrumentsMap.clear();

            if (Array.isArray(instrumentsFromServer)) {
                instrumentsFromServer.forEach(serverInstr => {
                    if (serverInstr && serverInstr._id) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å _id –∑ —Å–µ—Ä–≤–µ—Ä–∞
                        const clientInstrumentData = { ...serverInstr };
                        clientInstrumentData.id = serverInstr._id; // –ú–∞–ø–∏–º–æ _id –Ω–∞ id –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ
                        // delete clientInstrumentData._id; // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –≤–∏–¥–∞–ª–∏—Ç–∏ _id, —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

                        // –£–∑–≥–æ–¥–∂—É—î–º–æ –ø–æ–ª–µ —Ç–∏–ø—É, —è–∫–µ –æ—á—ñ–∫—É—î renderInstrument
                        if (!clientInstrumentData.instrumentClass && clientInstrumentData.type) {
                            clientInstrumentData.instrumentClass = clientInstrumentData.type;
                        }
                        // –ú–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ type, —è–∫—â–æ –≤–æ–Ω–æ –¥—É–±–ª—é—î instrumentClass —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
                        // delete clientInstrumentData.type;

                        instrumentsMap.set(clientInstrumentData.id, clientInstrumentData); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ 'id'

                        console.log("Processing clientInstrumentData for render:", clientInstrumentData);
                        const instrumentElement = renderInstrument(clientInstrumentData); // –ü–µ—Ä–µ–¥–∞—î–º–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –æ–±'—î–∫—Ç

                        if (instrumentElement) {
                            dashboardPanel.appendChild(instrumentElement);
                        }
                    } else {
                        console.warn("Received invalid instrument data from server (missing _id):", serverInstr);
                    }
                });
            } else {
                console.error('fetchInstruments did not return an array:', instrumentsFromServer);
            }
        } catch (error) {
            console.error('Failed to load instruments:', error);
            dashboardPanel.innerHTML = `<p class="error">Error loading instruments: ${error.message}</p>`;
        }
    }


    function makeDraggable(element) {
        let offsetX, offsetY, isDragging = false;
        element.addEventListener('mousedown', (e) => {
            if (e.target.tagName === 'BUTTON' || e.target.closest('.instrument-controls')) return;
            isDragging = true;
            offsetX = e.clientX - element.offsetLeft;
            offsetY = e.clientY - element.offsetTop;
            element.style.zIndex = 1000;
            e.preventDefault();
        });
        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            const newX = e.clientX - offsetX;
            const newY = e.clientY - offsetY;
            const parentRect = dashboardPanel.getBoundingClientRect();
            const elemRect = element.getBoundingClientRect();
            element.style.left = `${Math.max(0, Math.min(newX, parentRect.width - elemRect.width))}px`;
            element.style.top = `${Math.max(0, Math.min(newY, parentRect.height - elemRect.height))}px`;
        });
        document.addEventListener('mouseup', async () => {
            if (!isDragging) return;
            isDragging = false;
            element.style.zIndex = '';
            const instrumentId = element.dataset.id;
            const instrumentData = instrumentsMap.get(instrumentId);
            if (instrumentData) {
                instrumentData.x = parseInt(element.style.left, 10);
                instrumentData.y = parseInt(element.style.top, 10);
                try {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ, –≤–∫–ª—é—á–∞—é—á–∏ –ø–æ–∑–∏—Ü—ñ—é
                    const fullInstrumentDataToUpdate = { ...instrumentData };
                    // –î–æ–¥–∞—î–º–æ instrumentClass, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î (–¥–ª—è PUT –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω)
                    if (!fullInstrumentDataToUpdate.instrumentClass) {
                        fullInstrumentDataToUpdate.instrumentClass = fullInstrumentDataToUpdate.type;
                    }
                    await updateInstrument(instrumentId, fullInstrumentDataToUpdate);
                } catch (error) {
                    console.error('Failed to update instrument position:', error);
                }
            }
        });
    }


    addInstrumentBtn.onclick = () => openModalForAdd();
    closeModalBtn.onclick = () => instrumentModal.style.display = 'none';
    window.onclick = (event) => {
        if (event.target == instrumentModal) instrumentModal.style.display = 'none';
    };
    instrumentTypeSelect.onchange = () => updateVisibleFields(instrumentTypeSelect.value);

    function updateVisibleFields(type) {
        gaugeFields.style.display = type === 'GAUGE' ? 'block' : 'none';
        digitalDisplayFields.style.display = type === 'DIGITAL_DISPLAY' ? 'block' : 'none';
        warningPanelFields.style.display = type === 'WARNING_PANEL' ? 'block' : 'none';
    }

    function openModalForAdd() {
        document.getElementById('modalTitle').textContent = 'Add Instrument';
        instrumentForm.reset();
        document.getElementById('instrumentId').value = ''; // –î–ª—è –Ω–æ–≤–æ–≥–æ ID –ø–æ—Ä–æ–∂–Ω—ñ–π
        updateVisibleFields(instrumentTypeSelect.value);
        warningRangesContainer.innerHTML = '';
        instrumentModal.style.display = 'block';
    }

    async function openModalForEdit(id) { // 'id' —Ç—É—Ç - —Ü–µ _id –∑ —Å–µ—Ä–≤–µ—Ä–∞
        try {
            const instrumentFromServer = await fetchInstrument(id); // –ó–∞–ø–∏—Ç –∑ _id
            if (!instrumentFromServer) {
                alert('Instrument not found!');
                return;
            }

            // –ê–¥–∞–ø—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∏
            const instrumentToEdit = { ...instrumentFromServer };
            if (instrumentFromServer._id && typeof instrumentFromServer.id === 'undefined') {
                instrumentToEdit.id = instrumentFromServer._id; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π 'id'
            }
            // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ instrumentClass —î
            if (!instrumentToEdit.instrumentClass && instrumentToEdit.type) {
                instrumentToEdit.instrumentClass = instrumentToEdit.type;
            }


            document.getElementById('modalTitle').textContent = 'Edit Instrument';
            instrumentForm.reset();
            warningRangesContainer.innerHTML = '';

            document.getElementById('instrumentId').value = instrumentToEdit.id; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ö–õ–Ü–Ñ–ù–¢–°–¨–ö–ò–ô 'id' —É —Ñ–æ—Ä–º—É
            document.getElementById('instrumentName').value = instrumentToEdit.name;
            document.getElementById('instrumentType').value = instrumentToEdit.instrumentClass;
            document.getElementById('instrumentX').value = instrumentToEdit.x;
            document.getElementById('instrumentY').value = instrumentToEdit.y;
            document.getElementById('instrumentWidth').value = instrumentToEdit.width;
            document.getElementById('instrumentHeight').value = instrumentToEdit.height;
            document.getElementById('instrumentUnit').value = instrumentToEdit.unit || "";
            document.getElementById('instrumentDataSource').value = instrumentToEdit.dataSource || '';
            document.getElementById('instrumentUpdateInterval').value = instrumentToEdit.updateIntervalMs || 2000;

            updateVisibleFields(instrumentToEdit.instrumentClass);

            switch (instrumentToEdit.instrumentClass) {
                case 'GAUGE':
                    document.getElementById('gaugeMinValue').value = instrumentToEdit.minValue;
                    document.getElementById('gaugeMaxValue').value = instrumentToEdit.maxValue;
                    document.getElementById('gaugeDialColor').value = instrumentToEdit.dialColor || '#f0f0f0';
                    document.getElementById('gaugeNeedleColor').value = instrumentToEdit.needleColor || '#cc0000';
                    // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –ø–æ–ª—è, —è–∫—â–æ –≤–æ–Ω–∏ —î —É —Ñ–æ—Ä–º—ñ (valueTextColor, labelFont)
                    break;
                case 'DIGITAL_DISPLAY':
                    document.getElementById('digitalTextColor').value = instrumentToEdit.textColor || '#00ff00';
                    document.getElementById('digitalBgColor').value = instrumentToEdit.backgroundColor || '#000000';
                    document.getElementById('digitalFontSize').value = instrumentToEdit.fontSize || 24;
                    break;
                case 'WARNING_PANEL':
                    (instrumentToEdit.ranges || []).forEach(range => addWarningRangeToForm(range));
                    break;
            }
            instrumentModal.style.display = 'block';
        } catch (error) {
            console.error('Failed to open edit modal:', error);
            alert(`Error: ${error.message}`);
        }
    }

    instrumentForm.onsubmit = async (event) => {
        event.preventDefault();
        const currentInstrumentIdFromForm = document.getElementById('instrumentId').value; // –¶–µ –Ω–∞—à –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π 'id' (_id –∑ —Å–µ—Ä–≤–µ—Ä–∞)
        const type = document.getElementById('instrumentType').value;

        const commonData = { /* ... –≤–∞—à –∫–æ–¥ –∑–±–æ—Ä—É commonData ... */ };
        commonData.name = document.getElementById('instrumentName').value;
        commonData.x = parseInt(document.getElementById('instrumentX').value);
        commonData.y = parseInt(document.getElementById('instrumentY').value);
        commonData.width = parseInt(document.getElementById('instrumentWidth').value);
        commonData.height = parseInt(document.getElementById('instrumentHeight').value);
        commonData.unit = document.getElementById('instrumentUnit').value;
        commonData.dataSource = document.getElementById('instrumentDataSource').value || null;
        commonData.updateIntervalMs = parseInt(document.getElementById('instrumentUpdateInterval').value) || null;


        let specificData = { /* ... –≤–∞—à –∫–æ–¥ –∑–±–æ—Ä—É specificData ... */ };
        switch (type) {
            case 'GAUGE':
                specificData = {
                    minValue: parseFloat(document.getElementById('gaugeMinValue').value),
                    maxValue: parseFloat(document.getElementById('gaugeMaxValue').value),
                    dialColor: document.getElementById('gaugeDialColor').value,
                    needleColor: document.getElementById('gaugeNeedleColor').value,
                    // –î–æ–¥–∞–π—Ç–µ valueTextColor, labelFont, —è–∫—â–æ –≤–æ–Ω–∏ —î —É —Ñ–æ—Ä–º—ñ
                };
                break;
            case 'DIGITAL_DISPLAY':
                specificData = {
                    textColor: document.getElementById('digitalTextColor').value,
                    backgroundColor: document.getElementById('digitalBgColor').value,
                    fontSize: parseInt(document.getElementById('digitalFontSize').value),
                };
                break;
            case 'WARNING_PANEL':
                const ranges = [];
                document.querySelectorAll('.warning-range-item').forEach(item => {
                    ranges.push({
                        id: item.dataset.rangeId || `new_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`,
                        min: parseFloat(item.querySelector('.range-min').value),
                        max: parseFloat(item.querySelector('.range-max').value),
                        message: item.querySelector('.range-message').value,
                        level: item.querySelector('.range-level').value,
                        color: item.querySelector('.range-color').value,
                    });
                });
                specificData = { ranges: ranges };
                break;
        }


        const instrumentDataToSend = { ...commonData, ...specificData };
        instrumentDataToSend.instrumentClass = type;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –æ–ø–µ—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const isUpdate = currentInstrumentIdFromForm && currentInstrumentIdFromForm !== "";

        if (isUpdate) {
            // –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Å–µ—Ä–≤–µ—Ä –æ—á—ñ–∫—É—î ID –≤ URL, –∞ –≤ —Ç—ñ–ª—ñ –º–æ–∂–µ –±—É—Ç–∏ ID (—è–∫–∏–π –º–∞–ø–∏—Ç—å—Å—è –Ω–∞ _id).
            // –ù–∞—à InstrumentService->updateInstrument –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ID –∑ URL –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞,
            // —ñ ID –∑ —Ç—ñ–ª–∞ –¥–ª—è –¥–∞–Ω–∏—Ö, —â–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è (—ñ –∫–æ–ø—ñ—é—î ID –∑ URL –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç).
            instrumentDataToSend.id = currentInstrumentIdFromForm; // –ù–∞–¥—Å–∏–ª–∞—î–º–æ 'id' –≤ —Ç—ñ–ª—ñ (—è–∫–∏–π —î _id)
            console.log("Data to send for UPDATE:", JSON.stringify(instrumentDataToSend, null, 2));
            try {
                await updateInstrument(currentInstrumentIdFromForm, instrumentDataToSend); // ID –¥–ª—è URL
            } catch (error) {
                console.error('Failed to save instrument (update):', error);
                alert(`Error: ${error.message}`);
                return; // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–¥–∞–ª—å—à–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –±—É–ª–∞ –ø–æ–º–∏–ª–∫–∞
            }
        } else {
            // –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, 'id' –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è. –°–µ—Ä–≤–µ—Ä –∑–≥–µ–Ω–µ—Ä—É—î _id.
            console.log("Data to send for ADD:", JSON.stringify(instrumentDataToSend, null, 2));
            try {
                await addInstrument(instrumentDataToSend);
            } catch (error) {
                console.error('Failed to save instrument (add):', error);
                alert(`Error: ${error.message}`);
                return; // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–¥–∞–ª—å—à–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            }
        }

        instrumentModal.style.display = 'none';
        loadInstruments(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    };

    // ... (addWarningRangeToForm, rangeIdCounter) ...
    addWarningRangeBtn.onclick = () => addWarningRangeToForm();
    let rangeIdCounter = 0;
    function addWarningRangeToForm(rangeData = {}) { /* ... –≤–∞—à –∫–æ–¥ ... */ }


    loadInstruments();
    connectWebSocket();
});